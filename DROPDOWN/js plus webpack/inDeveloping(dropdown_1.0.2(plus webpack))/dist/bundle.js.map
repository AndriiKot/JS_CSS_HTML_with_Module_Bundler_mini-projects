{"version":3,"file":"bundle.js","mappings":"mBACA,MAIA,EAJoB,CAACA,EAASC,KAC5BD,EAAQE,UAAUC,OAAOF,EAAU,ECMrC,EAPwBG,IACtB,GAAsB,aAAlBA,EAAEC,OAAOC,KAAqB,OAElC,MAAMC,EAAWH,EAAEI,cAAcC,cAAc,0BAC/CF,EAASG,SAAWH,EAASG,OAAO,ECOtC,EAXuB,CAACV,EAASW,EAAUC,EAAUC,EAAmB,MAEtE,MAAMC,EAAgBC,SAASC,iBAAiBH,GAEhD,IAAII,EAAQ,EACZH,EAAcI,SAASC,IACjBA,EAAKT,SAASO,GAAO,IAE3BjB,EAAQoB,YAAcH,EAAQL,EAAWK,EAAQN,CAAQ,ECP3D,EAFyB,IAAIU,IAAI,CAAC,OAAQ,QCAnC,EAAmB,IAAIA,IAAI,CAAC,MAAO,KAAM,SCQ1CC,GCLoB,IAAID,IAAI,IAAI,KFDtC,IGMwB,IAAIA,IAAI,CAC9B,aACA,WACA,UACA,uBACA,yBFLmBN,SAASN,cAAc,gBACtCc,EACJD,EAAab,cAAc,iBAAiBe,UAIxCC,EAAWV,SAASN,cAAc,eAClCiB,EAAaD,EAAST,iBAAiB,SAIvCW,EAA0BZ,SAASN,cAAc,iBAEvDa,EAAaM,iBACX,QACA,EAAYC,UAAK,EAAMP,EAXW,WAcpCA,EAAaM,iBACX,QACA,EAAYC,UAAK,EAAMJ,EAXO,WAchCC,EAAWR,SAAQ,CAACC,EAAMW,KACxBX,EAAKS,iBAAiB,QAAS,GAC/BT,EAAKS,iBACH,QACA,EAAeC,UACb,EACAF,EACAJ,EA3BuB,YAKH,gCA2BxBJ,EAAKS,iBACH,SAAS,KE5Bc,EACzB5B,EACAW,EACAC,EACAC,EAAmB,4BAEnB,MAAMC,EAAgBC,SAASC,iBAAiBH,GAC1CkB,EAAuB,GAE7BjB,EAAcI,SAASC,IACjBA,EAAKT,SAASqB,EAAqBC,KAAKb,EAAKc,MAAM,IAGrCF,EAAqBG,SAAWpB,EAAcoB,SACjDlC,EAAQoB,YAAc,aAAY,EFe/Ce,CACER,EAGF,GAEJ,G","sources":["webpack://lesson-2/./src/handleClick.js","webpack://lesson-2/./src/toggleCheckbox.js","webpack://lesson-2/./src/newTextContent/newTextContent.js","webpack://lesson-2/./src/newTextContent/setArrayBackend.js","webpack://lesson-2/./src/newTextContent/setArrayFrontend.js","webpack://lesson-2/./app.js","webpack://lesson-2/./src/newTextContent/setArrayFullStack.js","webpack://lesson-2/./src/newTextContent/newFunctionalinDeveloping.js"],"sourcesContent":["﻿\nconst handleClick = (element, className) => {\n  element.classList.toggle(className);\n};\n\nexport default handleClick;\n","﻿\nconst toggleCheckbox = (e) => {\n  if (e.target.type === 'checkbox') return;\n\n  const checkbox = e.currentTarget.querySelector('input[type=\\'checkbox\\']');\n  checkbox.checked = !checkbox.checked;\n};\n\nexport default toggleCheckbox;\n","﻿\nconst newTextContent = (element, oldValue, newValue, selectorNodeList = '',\n) => {\n  const nodeListItems = document.querySelectorAll(selectorNodeList);\n\n  let count = 0;\n  nodeListItems.forEach((item) => {\n    if (item.checked) count++;\n  });\n  element.textContent = count ? newValue + count : oldValue;\n};\n\nexport default newTextContent;\n","﻿const setArrayBackend = new Set(['ruby', 'sql']);\n\nexport default setArrayBackend;\n","﻿const setArrayFrontend = new Set(['css', 'js', 'html']);\n\nexport default setArrayFrontend;\n\n\n","﻿\nimport handleClick from './src/handleClick.js';\nimport toggleCheckbox from './src/toggleCheckbox.js';\nimport newTextContent from './src/newTextContent/newTextContent.js';\nimport {newTextContentCopy} from './src/newTextContent/newFunctionalinDeveloping.js'\n\n\n\nconst selectButton = document.querySelector('.select-btn');\nconst defaultButtonTextContent =\n  selectButton.querySelector('.text-content').innerText;\nconst newButtonTextContent = 'Selected ';\nconst selectButtonActiveClassName = 'active';\n\nconst dropDown = document.querySelector('.list-items');\nconst liNodeList = dropDown.querySelectorAll('.item');\nconst checkboxClassName = '.list-items__item__checkbox';\nconst dropDownExistsClassName = 'exists';\n\nconst selectButtonTextContent = document.querySelector('.text-content');\n\nselectButton.addEventListener(\n  'click',\n  handleClick.bind(this, selectButton, selectButtonActiveClassName)\n);\n\nselectButton.addEventListener(\n  'click',\n  handleClick.bind(this, dropDown, dropDownExistsClassName)\n);\n\nliNodeList.forEach((item, _index,) => {\n  item.addEventListener('click', toggleCheckbox);\n  item.addEventListener(\n    'click',\n    newTextContent.bind(\n      this,\n      selectButtonTextContent,\n      defaultButtonTextContent,\n      newButtonTextContent,\n      checkboxClassName\n    )\n  );\n  item.addEventListener(\n    'click', () => {\n      newTextContentCopy(\n        selectButtonTextContent,\n        defaultButtonTextContent,\n        newButtonTextContent\n      )\n    }\n );\n\n});\n\n\n\n","﻿import setArrayFrontend from \"./setArrayFrontend\";\nimport setArrayBackend from \"./setArrayBackend\";\n\nconst setArrayFullStack = new Set([...setArrayBackend, ...setArrayFrontend]);\n\nexport default setArrayFullStack;\n","﻿import setArrayBackend from \"./setArrayBackend\";\r\nimport setArrayFrontend from \"./setArrayFrontend\";\r\nimport setArrayFullStack from \"./setArrayFullStack\";\r\n\r\nconst setFullStack = setArrayFullStack;\r\nconst setBackend = setArrayBackend;\r\nconst setFrontend = setArrayFrontend;\r\n\r\nconst setAllNewValues = new Set([\r\n  \"Full Stack\",\r\n  \"Frontend\",\r\n  \"Backend\",\r\n  \"Backend for Frontend\",\r\n  \"Frontend for Backend\",\r\n]);\r\n\r\nconst newTextContentCopy = (\r\n  element,\r\n  oldValue,\r\n  newValue,\r\n  selectorNodeList = \"input[type='checkbox']\"\r\n) => {\r\n  const nodeListItems = document.querySelectorAll(selectorNodeList);\r\n  const arrayCheckedElements = [];\r\n\r\n  nodeListItems.forEach((item) => {\r\n    if (item.checked) arrayCheckedElements.push(item.value);\r\n  });\r\n\r\n  const isFullStack = arrayCheckedElements.length === nodeListItems.length;\r\n  if (isFullStack) element.textContent = \"Full Stack\";\r\n};\r\n\r\nexport { newTextContentCopy };\r\n"],"names":["element","className","classList","toggle","e","target","type","checkbox","currentTarget","querySelector","checked","oldValue","newValue","selectorNodeList","nodeListItems","document","querySelectorAll","count","forEach","item","textContent","Set","selectButton","defaultButtonTextContent","innerText","dropDown","liNodeList","selectButtonTextContent","addEventListener","bind","_index","arrayCheckedElements","push","value","length","newTextContentCopy"],"sourceRoot":""}