{"version":3,"file":"bundle.js","mappings":"mBACA,MAIA,EAJoB,CAACA,EAASC,KAC5BD,EAAQE,UAAUC,OAAOF,EAAU,ECMrC,EAPwBG,IACtB,GAAsB,aAAlBA,EAAEC,OAAOC,KAAqB,OAElC,MAAMC,EAAWH,EAAEI,cAAcC,cAAc,0BAC/CF,EAASG,SAAWH,EAASG,OAAO,ECAtC,EAJoB,CAACC,EAAc,GAAIC,EAAc,KAC5CA,EAAYC,OAAOC,GAAOH,EAAYI,SAASD,KCAxD,EAFyB,IAAIE,IAAI,CAAC,OAAQ,QCE1C,EAF0B,IAAIA,IAAI,CAAC,MAAO,KAAM,SCKhD,EAF0B,IAAIA,IAAI,IAAI,KAAoB,ICIxB,EAClCC,EAAe,EACfC,EAAa,EACbC,EAAc,EACdC,EAAK,KAEHC,QAAQC,IAAIL,EAAaC,EAAWC,GAEpC,MAAMI,EAAmB,IAAIP,IAAI,CAAC,aAAc,WAAY,UAC5D,uBAAwB,yBACxBK,QAAQC,IAAIC,EAAe,EAG7BC,GAGA,MAWA,EAXuB,CAACxB,EAASyB,EAAUC,EAAUC,EAAmB,MAEtE,MAAMC,EAAgBC,SAASC,iBAAiBH,GAEhD,IAAII,EAAQ,EACZH,EAAcI,SAASC,IACjBA,EAAKvB,SAASqB,GAAO,IAE3B/B,EAAQkC,YAAcH,EAAQL,EAAWK,EAAQN,CAAQ,EC1BrDU,EAAeN,SAASpB,cAAc,eACtC2B,EACJD,EAAa1B,cAAc,iBAAiB4B,UAIxCC,EAAWT,SAASpB,cAAc,eAClC8B,EAAaD,EAASR,iBAAiB,SAIvCU,EAA0BX,SAASpB,cAAc,iBAEvD0B,EAAaM,iBACX,QACA,EAAYC,UAAK,EAAMP,EAXW,WAcpCA,EAAaM,iBACX,QACA,EAAYC,UAAK,EAAMJ,EAXO,WAchCC,EAAWP,SAAQ,CAACC,EAAMU,EAAQC,EAAWC,EAAa,aACxDZ,EAAKQ,iBAAiB,QAAS,GAC/BR,EAAKQ,iBACH,QACA,EAAeC,UACb,EACAF,EACAJ,EA3BuB,YAKH,+BA0BvB,G","sources":["webpack://lesson-2/./src/handleClick.js","webpack://lesson-2/./src/toggleCheckbox.js","webpack://lesson-2/./src/newTextContent/checkSubset.js","webpack://lesson-2/./src/newTextContent/setArrayBackend.js","webpack://lesson-2/./src/newTextContent/setArrayFrontend.js","webpack://lesson-2/./src/newTextContent/setArrayFullStack.js","webpack://lesson-2/./src/newTextContent/newTextContent.js","webpack://lesson-2/./app.js"],"sourcesContent":["﻿\nconst handleClick = (element, className) => {\n  element.classList.toggle(className);\n};\n\nexport default handleClick;\n","﻿\nconst toggleCheckbox = (e) => {\n  if (e.target.type === 'checkbox') return;\n\n  const checkbox = e.currentTarget.querySelector('input[type=\\'checkbox\\']');\n  checkbox.checked = !checkbox.checked;\n};\n\nexport default toggleCheckbox;\n","﻿\nconst checkSubset = (parentArray = [], subsetArray = []) => {\n  return subsetArray.every((el) => parentArray.includes(el));\n};\n\nexport default checkSubset;\n","﻿const setArrayBackend = new Set(['ruby', 'sql']);\n\nexport default setArrayBackend;\n","﻿const setArrayFrontend = new Set(['css', 'js', 'html']);\n\nexport default setArrayFrontend;\n\n\n","﻿import setArrayFrontend from \"./setArrayFrontend\";\nimport setArrayBackend from \"./setArrayBackend\";\n\nconst setArrayFullStack = new Set([...setArrayBackend, ...setArrayFrontend]);\n\nexport default setArrayFullStack;\n","﻿// Test code begin\n\nimport checkSubset from './checkSubset';\nimport setArrayBackend from './setArrayBackend';\nimport setArrayFrontend from './setArrayFrontend';\nimport setArrayFullStack from './setArrayFullStack';\n\nconst createNewValueTextContent = (\nsetFullStack = setArrayFullStack,\nsetBackend = setArrayBackend,\nsetFrontend = setArrayFrontend,\nfn = checkSubset\n) => {\n  console.log(setFullStack,setBackend,setFrontend);\n\n  const setAllNewValues  = new Set(['Full Stack', 'Frontend', 'Backend',\n  'Backend for Frontend', 'Frontend for Backend']);\n  console.log(setAllNewValues)\n};\n\ncreateNewValueTextContent();\n// test code finish\n\nconst newTextContent = (element, oldValue, newValue, selectorNodeList = '',\n) => {\n  const nodeListItems = document.querySelectorAll(selectorNodeList);\n\n  let count = 0;\n  nodeListItems.forEach((item) => {\n    if (item.checked) count++;\n  });\n  element.textContent = count ? newValue + count : oldValue;\n};\n\nexport default newTextContent;\n","﻿\nimport handleClick from './src/handleClick.js';\nimport toggleCheckbox from './src/toggleCheckbox.js';\nimport newTextContent from './src/newTextContent/newTextContent.js';\n\nconst selectButton = document.querySelector('.select-btn');\nconst defaultButtonTextContent =\n  selectButton.querySelector('.text-content').innerText;\nconst newButtonTextContent = 'Selected ';\nconst selectButtonActiveClassName = 'active';\n\nconst dropDown = document.querySelector('.list-items');\nconst liNodeList = dropDown.querySelectorAll('.item');\nconst checkboxClassName = '.list-items__item__checkbox';\nconst dropDownExistsClassName = 'exists';\n\nconst selectButtonTextContent = document.querySelector('.text-content');\n\nselectButton.addEventListener(\n  'click',\n  handleClick.bind(this, selectButton, selectButtonActiveClassName)\n);\n\nselectButton.addEventListener(\n  'click',\n  handleClick.bind(this, dropDown, dropDownExistsClassName)\n);\n\nliNodeList.forEach((item, _index, _nodeList, datasetKey = 'content') => {\n  item.addEventListener('click', toggleCheckbox);\n  item.addEventListener(\n    'click',\n    newTextContent.bind(\n      this,\n      selectButtonTextContent,\n      defaultButtonTextContent,\n      newButtonTextContent,\n      checkboxClassName\n    )\n  );\n  // console.log(item.dataset[datasetKey]);\n});\n"],"names":["element","className","classList","toggle","e","target","type","checkbox","currentTarget","querySelector","checked","parentArray","subsetArray","every","el","includes","Set","setFullStack","setBackend","setFrontend","fn","console","log","setAllNewValues","createNewValueTextContent","oldValue","newValue","selectorNodeList","nodeListItems","document","querySelectorAll","count","forEach","item","textContent","selectButton","defaultButtonTextContent","innerText","dropDown","liNodeList","selectButtonTextContent","addEventListener","bind","_index","_nodeList","datasetKey"],"sourceRoot":""}