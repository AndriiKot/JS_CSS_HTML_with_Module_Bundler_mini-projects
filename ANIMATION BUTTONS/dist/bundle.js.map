{"version":3,"file":"bundle.js","mappings":"mBAEA,MAIA,EAJsB,WAAsB,IAArBA,EAAGC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGG,EAAGH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACpC,OAAOI,KAAKC,MAAOD,KAAKE,SAAWH,EAAOJ,EAC5C,ECFoBQ,MCKpBC,QAAQC,ICLsC,SAACF,GAC3C,OADsDP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,QAC7CO,IAAYA,KAAcA,CAC1C,CDGYG,IACZF,QAAQC,IENY,WAIf,IAFHE,EAAiBX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QAAGE,EACpBU,EAAEZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,OAEL,MAAO,IAAI,IAAIa,MAJKb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAIqBc,KAAI,IACvCF,EAAGD,IAEd,CFFYI,IACZP,QAAQC,IDNoB,mBAAZF,GCOhBC,QAAQC,IAAIO,KAEZ,MAAMC,EAAeC,SAASC,cAAc,UAEtCC,EAAqBJ,EAAcK,UAAK,EAAM,EAAG,KAyDvDJ,EAAaK,iBAAiB,SAxC9BC,eAAeC,EAAqBC,EAAKC,EAAKC,GAO5C,GANAA,EAAST,SAASC,cAAc,UAAUS,MAAMC,aAChDH,EAjBiC,WAG9B,IADHd,EAAEZ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGoB,EAEL,MAAO,IAAI,IAAIP,MAHFb,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAGqBc,KAAI,IAAMF,KACjD,CAYSkB,GAKa,iBADpBL,IAASE,GAAUA,GAFV,IAAID,GAAMZ,KAAKiB,GAAOA,EAAM,KAGP,CAC5B,IAAIC,EAAaP,EAAKQ,QAAQ,QAAQ,IACtCD,EAAaA,EAAWC,QAAQ,KAAK,KACrC,IAAIC,EAAmBF,EAAWG,MAAM,KACxCD,EAAmBA,EAAiBpB,KAAKiB,IAAaA,IAEtDN,EAAOS,CACT,CAEA,SAASE,EAAMC,GACb,OAAO,IAAIC,SAASC,GAAYC,WAAWD,EAASF,IACtD,OACAd,iBACE,IAAIkB,EAAQ,EACZ,KAAOA,EAAQ,GAAG,CAChBA,EAAQ,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAKxB,OAAQyC,IAC3BjB,EAAKiB,KAAOhB,EAAKgB,IAKnBjB,EAAKiB,GAAKhB,EAAKgB,GAAMjB,EAAKiB,IAAM,EAAMjB,EAAKiB,IAAM,EAEnDzB,EAAaW,MAAMC,aAAgB,GAAEJ,EAAK,OAAOA,EAAK,OAAOA,EAAK,OAAOA,EAAK,SAASA,EAAK,OAAOA,EAAK,OAAOA,EAAK,OAAOA,EAAK,YAC1HW,EAAM,KAPV5B,QAAQC,IAAI,YACZgC,IAQN,CACF,CACME,SACAnB,GACR,G","sources":["webpack://animation-buttons/./functions/random_integer_fn.js","webpack://animation-buttons/./functions/isFunction.js","webpack://animation-buttons/./main.js","webpack://animation-buttons/./functions/returnResultOfFunction.js","webpack://animation-buttons/./functions/createArray.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst randomInteger = (min = 1, max = 1) => {\r\n  return Math.floor((Math.random() * max) + min);\r\n}\r\n\r\nexport default randomInteger;","\"use strict\";\r\n\r\nconst isFunction = (element) => {\r\n  return typeof element === \"function\";\r\n};\r\n\r\nexport default isFunction ;\r\n","\"use strict\";\r\n\r\nimport randomInteger from \"./functions/random_integer_fn\";\r\nimport isFunction from \"./functions/isFunction.js\";\r\nimport returnResultOfFunction from \"./functions/returnResultOfFunction.js\";\r\nimport createArray from \"./functions/createArray.js\";\r\n\r\nconsole.log(returnResultOfFunction())\r\nconsole.log(createArray())\r\nconsole.log(isFunction())\r\nconsole.log(randomInteger())\r\n\r\nconst crazy_button = document.querySelector(\"button\");\r\n\r\nconst randomInteger0_100 = randomInteger.bind(this, 0, 100);\r\n\r\nconst getArrayRandomBorderRadius = (\r\n  countElements = 8,\r\n  fn = randomInteger0_100\r\n) => {\r\n  return [...new Array(countElements)].map(() => fn());\r\n};\r\n\r\n// const getArrayDefaultBorderRadius = (countElements = 8, element = 0) => {\r\n//   return [...new Array(countElements)].map(() => element);\r\n// };\r\n\r\nasync function animationBorderRadius(element,oldValueBorderRadius) {\r\n\r\n}\r\n\r\nasync function comparison_of_values(el_1,el_2,button) {\r\n  button = document.querySelector('button').style.borderRadius;\r\n  el_2 = getArrayRandomBorderRadius();\r\n  const test_fun = () => {\r\n    return [...el_2].map((el) => el += 3)\r\n  }\r\n  el_1 = !!button && button || test_fun();\r\n  if (typeof el_1 === 'string') {\r\n    let new_string = el_1.replace(/[%/]/g,'')\r\n    new_string = new_string.replace('  ',' ')\r\n    let new_values_array = new_string.split(' ')\r\n    new_values_array = new_values_array.map((el) => el = +el)\r\n\r\n    el_1 = new_values_array\r\n  } else {\r\n  }\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  async function FF() {\r\n    let count = 0;\r\n    while (count < 8) {\r\n      count = 0;\r\n      for (let i = 0; i < el_1.length; i++) {\r\n        if (el_1[i] === el_2[i]) {\r\n          console.log(\"Равны!!!\")\r\n          count++;\r\n          continue;\r\n        } else {\r\n          el_1[i] > el_2[i] ? (el_1[i] -= 1) : (el_1[i] += 1);\r\n        }\r\n        crazy_button.style.borderRadius = `${el_1[0]}% ${el_1[1]}% ${el_1[2]}% ${el_1[3]}% / ${el_1[4]}% ${el_1[5]}% ${el_1[6]}% ${el_1[7]}%`;\r\n        await sleep(0);\r\n      }\r\n    }\r\n  }\r\n  await FF()\r\n  await comparison_of_values()\r\n};\r\n\r\ncrazy_button.addEventListener('click',comparison_of_values)\r\n","\"use strict\";\r\n\r\nconst returnResultOfFunctionOrReturnElement = (element, fn = () => {}) => {\r\n    return ((fn(element) && element()) || element)\r\n};\r\n\r\nexport default returnResultOfFunctionOrReturnElement;\r\n","\"use strict\";\r\n\r\nconst createArray = (\r\n  countElementsInArray = 2,\r\n  elementOrFunction = undefined,\r\n  fn = () => {}\r\n) => {\r\n  return [...new Array(countElementsInArray)].map(() => {\r\n    return fn(elementOrFunction);\r\n  });\r\n};\r\n\r\nexport default createArray;\r\n"],"names":["min","arguments","length","undefined","max","Math","floor","random","element","console","log","returnResultOfFunction","elementOrFunction","fn","Array","map","createArray","randomInteger","crazy_button","document","querySelector","randomInteger0_100","bind","addEventListener","async","comparison_of_values","el_1","el_2","button","style","borderRadius","getArrayRandomBorderRadius","el","new_string","replace","new_values_array","split","sleep","ms","Promise","resolve","setTimeout","count","i","FF"],"sourceRoot":""}