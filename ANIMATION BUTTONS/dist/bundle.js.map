{"version":3,"file":"bundle.js","mappings":"mBAEA,MCIA,EAJA,SAAeA,GACX,OAAO,IAAIC,SAASC,GAAYC,WAAWD,EAASF,IACxD,ECEA,EAJoBI,GACQ,mBAAZA,ECIhB,EAJ8C,SAACA,GAC3C,OADsDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,GAC7CJ,IAAYA,KAAcA,CAC1C,ECGMK,EAAeC,SAASC,cAAc,UAEtCC,EJRgB,WAAsB,IAArBC,EAAGR,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGS,EAAGT,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACpC,OAAOU,KAAKC,MAAOD,KAAKE,SAAWH,EAAOD,EAC5C,EIM2CK,UAAK,EAAM,EAAG,KAcnDC,GAV2BC,MAHF,GAGgCC,KAFrB,GCRtB,WAIf,IAFHjB,EAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QAAGE,EACVe,EAAGjB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGkB,EAEN,MAAO,IAAI,IAAIH,MAJKf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAIqBmB,KAAI,IACvCF,EAAIA,EAAIlB,KAEnB,EDMoDc,UAClD,EAR6B,EAU7BN,IEnBkBa,CAACrB,EAASsB,KAC5BtB,EAAQuB,UAAUC,OAAOF,EAAU,GFqBCR,UACpC,EACAT,EAjB2B,gBA8G7BA,EAAaoB,iBAAiB,QAASV,GACvCV,EAAaoB,iBAAiB,SA1D9BC,eACEC,IAIF,iBACE,OAAa,CACX,IAAIrB,SAASC,cAAc,gBAgBpB,CACLqB,QAAQC,IAAI,kBACZ,KACF,CAlBED,QAAQC,IAAI,eACCF,EAAMG,cACnBF,QAAQC,IAAIF,EAAMG,cAAcC,MAAMC,oBAYhCC,EAAM,IAuBhB,CAUD,CAlDD,EAkDI,G","sources":["webpack://animation-buttons/./src/random_integer_fn.js","webpack://animation-buttons/./src/sleepAsyncFn.js","webpack://animation-buttons/./src/createArray/isFunction.js","webpack://animation-buttons/./src/createArray/returnResultOfFunction.js","webpack://animation-buttons/./main.js","webpack://animation-buttons/./src/createArray/createArray.js","webpack://animation-buttons/./src/toggleHandleClick.js"],"sourcesContent":["\"use strict\";\r\n\r\nconst randomInteger = (min = 1, max = 1) => {\r\n  return Math.floor((Math.random() * max) + min);\r\n}\r\n\r\nexport default randomInteger;","\"use strict\";\r\n\r\nfunction sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default sleep;\r\n  \r\n","\"use strict\";\r\n\r\nconst isFunction = (element) => {\r\n  return typeof element === \"function\";\r\n};\r\n\r\nexport default isFunction ;\r\n","\"use strict\";\r\nimport isFunction from \"./isFunction\";\r\n\r\nconst returnResultOfFunctionOrReturnElement = (element, fn = isFunction) => {\r\n    return ((fn(element) && element()) || element)\r\n};\r\n\r\nexport default returnResultOfFunctionOrReturnElement;\r\n","\"use strict\";\r\n\r\nimport randomInteger from \"./src/random_integer_fn.js\";\r\nimport sleep from \"./src/sleepAsyncFn.js\";\r\nimport createArray from \"./src/createArray/createArray.js\";\r\nimport handleClick from \"./src/toggleHandleClick.js\";\r\nimport convertStringToArrayInteger from \"./src/convertStringToArrayInteger/convertStringToArrayInteger.js\";\r\n\r\nconst crazy_button = document.querySelector(\"button\");\r\nconst animationGoClassName = \"animationGo\";\r\nconst fnRandomInteger0_100 = randomInteger.bind(this, 0, 100);\r\nconst elementsOfBorderRadius = 8;\r\nconst defaultValueOfElementBorderRadius = 0;\r\n\r\nconst arrayDefaultBorderRadius = Array(elementsOfBorderRadius).fill(\r\n  defaultValueOfElementBorderRadius\r\n);\r\n\r\nconst fnCreateArrayRandomBorderRadius = createArray.bind(\r\n  this,\r\n  elementsOfBorderRadius,\r\n  fnRandomInteger0_100\r\n);\r\n\r\nconst fnToggleAnimation = handleClick.bind(\r\n  this,\r\n  crazy_button,\r\n  animationGoClassName\r\n);\r\n\r\nconst convertingValueBorderRadiusToArray = (\r\n  element,\r\n  array = arrayDefaultBorderRadius\r\n) => {\r\n  return element ? convertStringToArrayInteger(element) : array;\r\n};\r\n\r\nasync function loopAnimation() {\r\n  while (true) {\r\n    if (document.querySelector(\".animationGo\")) {\r\n      console.log(\"AnimationGo\");\r\n      const self = event.currentTarget;\r\n      const oldValueBorderRadius = self.style.borderRadius;\r\n      const arrayOldValueBorderRadius = fnConvertToArray(oldValueBorderRadius);\r\n      const arrayNewValueBorderRadius = fnNewArray();\r\n      crazy_button.style.borderRadius = `${arrayNewValueBorderRadius[0]}% \r\n      ${arrayNewValueBorderRadius[1]}% \r\n      ${arrayNewValueBorderRadius[2]}%\r\n      ${arrayNewValueBorderRadius[3]}% / \r\n      ${arrayNewValueBorderRadius[4]}% \r\n      ${arrayNewValueBorderRadius[5]}% \r\n      ${arrayNewValueBorderRadius[6]}% \r\n      ${arrayNewValueBorderRadius[7]}%`;\r\n    } else {\r\n      console.log(\"Stop Animation\");\r\n      break;\r\n    }\r\n    await sleep(5000);\r\n  }\r\n  console.log(\"NO Animation\");\r\n}\r\n\r\nasync function animationBorderRadius(\r\n  event,\r\n  fnConvertToArray = convertingValueBorderRadiusToArray,\r\n  fnNewArray = fnCreateArrayRandomBorderRadius\r\n) {\r\n(async function() {\r\n  while (true) {\r\n    if (document.querySelector(\".animationGo\")) {\r\n      console.log(\"AnimationGo\");\r\n      const self = event.currentTarget;\r\n      console.log(event.currentTarget.style.borderRadius)\r\n      // const oldValueBorderRadius = self.style.borderRadius;\r\n      // const arrayOldValueBorderRadius = fnConvertToArray(oldValueBorderRadius);\r\n      // const arrayNewValueBorderRadius = fnNewArray();\r\n      // crazy_button.style.borderRadius = `${arrayNewValueBorderRadius[0]}% \r\n      // ${arrayNewValueBorderRadius[1]}% \r\n      // ${arrayNewValueBorderRadius[2]}%\r\n      // ${arrayNewValueBorderRadius[3]}% / \r\n      // ${arrayNewValueBorderRadius[4]}% \r\n      // ${arrayNewValueBorderRadius[5]}% \r\n      // ${arrayNewValueBorderRadius[6]}% \r\n      // ${arrayNewValueBorderRadius[7]}%`;\r\n      await sleep(1000)\r\n    } else {\r\n      console.log(\"Stop Animation\");\r\n      break;\r\n    }\r\n// TEST while true\r\n  // const self = event.currentTarget;\r\n  // const oldValueBorderRadius = self.style.borderRadius;\r\n  // const arrayOldValueBorderRadius = fnConvertToArray(oldValueBorderRadius);\r\n  // const arrayNewValueBorderRadius = fnNewArray();\r\n  // if (self.classList.contains(animationGoClassName)) {\r\n    // console.log(\"ON\");\r\n    // console.log(`RandomValue: ${arrayNewValueBorderRadius}`);\r\n    // console.log(`OldVAlue: ${arrayOldValueBorderRadius}`);\r\n    // console.log(document.querySelector(\".animationGo\"));\r\n    // console.log(self.classList.contains(animationGoClassName));\r\n  // } else {\r\n    // console.log(\"OFF\");\r\n    // console.log(`RandomValue: ${arrayNewValueBorderRadius}`);\r\n    // console.log(`OldVAlue: ${arrayOldValueBorderRadius}`);\r\n    // console.log(document.querySelector(\".animationGo\"));\r\n    // console.log(self.classList.contains(animationGoClassName));\r\n    // return;\r\n  }\r\n  // crazy_button.style.borderRadius = `${arrayNewValueBorderRadius[0]}% \r\n  //                                     ${arrayNewValueBorderRadius[1]}% \r\n  //                                     ${arrayNewValueBorderRadius[2]}%\r\n  //                                     ${arrayNewValueBorderRadius[3]}% / \r\n  //                                     ${arrayNewValueBorderRadius[4]}% \r\n  //                                     ${arrayNewValueBorderRadius[5]}% \r\n  //                                     ${arrayNewValueBorderRadius[6]}% \r\n  //                                     ${arrayNewValueBorderRadius[7]}%`;\r\n  //  loopAnimation();\r\n})()}\r\n\r\ncrazy_button.addEventListener(\"click\", fnToggleAnimation);\r\ncrazy_button.addEventListener(\"click\", animationBorderRadius);\r\n\r\nasync function comparison_of_values(el_1, el_2, button) {\r\n  button = document.querySelector(\"button\").style.borderRadius;\r\n  // el_2 = getArrayRandomBorderRadius();\r\n  el_2 = fnCreateArrayRandomBorderRadius();\r\n  const test_fun = () => {\r\n    return [...el_2].map((el) => (el += 3));\r\n  };\r\n  el_1 = (!!button && button) || test_fun();\r\n  if (typeof el_1 === \"string\") {\r\n    let new_string = el_1.replace(/[%/]/g, \"\");\r\n    new_string = new_string.replace(\"  \", \" \");\r\n    let new_values_array = new_string.split(\" \");\r\n    new_values_array = new_values_array.map((el) => (el = +el));\r\n\r\n    el_1 = new_values_array;\r\n  } else {\r\n  }\r\n  function sleep(ms) {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n  async function FF() {\r\n    let count = 0;\r\n    while (count < 8) {\r\n      count = 0;\r\n      for (let i = 0; i < el_1.length; i++) {\r\n        if (el_1[i] === el_2[i]) {\r\n          console.log(\"Равны!!!\");\r\n          count++;\r\n          continue;\r\n        } else {\r\n          el_1[i] > el_2[i] ? (el_1[i] -= 1) : (el_1[i] += 1);\r\n        }\r\n        crazy_button.style.borderRadius = `${el_1[0]}% ${el_1[1]}% ${el_1[2]}% ${el_1[3]}% / ${el_1[4]}% ${el_1[5]}% ${el_1[6]}% ${el_1[7]}%`;\r\n        await sleep(0);\r\n      }\r\n    }\r\n  }\r\n  await FF();\r\n  await comparison_of_values();\r\n}\r\n\r\n// crazy_button.addEventListener(\"click\", comparison_of_values);\r\n","\"use strict\";\r\n\r\nimport returnResultOfFunctionOrReturnElement from \"./returnResultOfFunction.js\";\r\n\r\nconst createArray = (\r\n  countElementsInArray = 0,\r\n  element = undefined,\r\n  fn1 = returnResultOfFunctionOrReturnElement\r\n) => {\r\n  return [...new Array(countElementsInArray)].map(() => {\r\n    return fn1(fn1(element));\r\n  });\r\n};\r\n\r\n\r\n\r\nexport default createArray;\r\n","\"use strict\";\r\n\r\nconst handleClick = (element, className) => {\r\n  element.classList.toggle(className);\r\n};\r\n\r\nexport default handleClick;\r\n"],"names":["ms","Promise","resolve","setTimeout","element","arguments","length","undefined","isFunction","crazy_button","document","querySelector","fnRandomInteger0_100","min","max","Math","floor","random","bind","fnToggleAnimation","Array","fill","fn1","returnResultOfFunctionOrReturnElement","map","handleClick","className","classList","toggle","addEventListener","async","event","console","log","currentTarget","style","borderRadius","sleep"],"sourceRoot":""}